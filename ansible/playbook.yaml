
---
- name: Personal Arch Post-Install
  hosts: localhost
  become: true

  vars_prompt:
    - name: "user"
      prompt: "Which username should be configured?"
      private: no

  tasks:

    - name: Update pacman
      pacman:
        update_cache: yes
        upgrade: yes

    - name: Install packages
      pacman:
        name:
          - alsa-firmware
          - alsa-ucm-conf
          - bash-completion
          - bluez-utils
          - brightnessctl
          - direnv
          - exfat-utils
          - firefox
          - fwupd
          - ghostty
          - hypridle
          - hyprland
          - hyprlock
          - hyprpaper
          - intel-ucode
          - nautilus
          - neovim
          - nfs-utils
          - openssh
          - pamixer
          - pipewire
          - pipewire-pulse
          - qbittorrent
          - ripgrep
          - rpi-imager
          - sof-firmware
          - starship
          - stow
          - swaync
          - tlp
          - tmux
          - ttf-jetbrains-mono-nerd
          - waybar
          - wl-clipboard
          - wofi
        state: present

    - name: Check if paru is installed
      ansible.builtin.stat:
        path: /usr/bin/paru
      register: paru_installed
    
    - name: Clone paru AUR helper
      ansible.builtin.git:
        repo: "https://aur.archlinux.org/paru.git"
        dest: "/tmp/paru"
        update: yes
      become_user: "{{ user }}"
      when: paru_installed.stat.exists == False

    - name: Build and install paru
      ansible.builtin.command:
        cmd: makepkg -si --noconfirm
        chdir: /tmp/paru
      become_user: "{{ user }}"
      when: paru_installed.stat.exists == False

    - name: Check if paru is installed
      ansible.builtin.stat:
        path: /usr/bin/paru
      register: paru_installed

    - name: Install nordvpn-bin from AUR with paru
      become_user: "{{ user }}"
      shell: paru -S --noconfirm nordvpn-bin
      args:
        creates: /usr/bin/nordvpn

    - name: Install Nix package manager (multi-user)
      become_user: "{{ user }}"
      shell: |
        if ! command -v nix-env >/dev/null; then
          sh <(curl -L https://nixos.org/nix/install) --daemon
        fi
      args:
        executable: /bin/bash

    - name: Install tmux plugin manager (TPM)
      become_user: "{{ user }}"
      ansible.builtin.git:
        repo: "https://github.com/tmux-plugins/tpm"
        dest: "/home/{{ user }}/.tmux/plugins/tpm"
        update: yes

    - name: Clone dotfiles
      become_user: "{{ user }}"
      ansible.builtin.git:
        repo: "https://github.com/willy-kind/dotfiles.git"
        dest: "/home/{{ user }}/dotfiles"
        version: main
        update: yes

    - name: Remove conflicting .bashrc before stow
      become_user: "{{ user }}"
      file:
        path: "/home/{{ user }}/.bashrc"
        state: absent

    - name: Stow dotfiles
      become_user: "{{ user }}"
      ansible.builtin.command:
        cmd: stow bash ghostty hyprland k9s nix nvim starship swaync tmux wallpapers waybar wofi
        chdir: "/home/{{ user }}/dotfiles"

    - name: Enable PipeWire PulseAudio service
      become_user: "{{ user }}"
      ansible.builtin.systemd:
        name: pipewire-pulse.service
        enabled: true
        state: started
        scope: user

    - name: Enable PipeWire service 
      become_user: "{{ user }}"
      ansible.builtin.systemd:
        name: pipewire.service
        enabled: true
        state: started
        scope: user

    - name: Enable WirePlumber service
      become_user: "{{ user }}"
      ansible.builtin.systemd:
        name: wireplumber.service
        enabled: true
        state: started
        scope: user

    - name: Enable Hyprland service
      become_user: "{{ user }}"
      ansible.builtin.systemd:
        name: hyprland.service
        enabled: true
        state: started
        scope: user

    - name: Enable nordvpnd service
      become: true
      systemd:
        name: nordvpnd
        enabled: true
        state: started

    - name: Enable nix-daemon.service
      systemd:
        name: nix-daemon.service
        enabled: true
        state: started

    - name: Add user to nix-users group
      user:
        name: "{{ user }}"
        groups: nix-users
        append: yes

    - name: Ensure nix profile is sourced in .bashrc
      become_user: "{{ user }}"
      lineinfile:
        path: "/home/{{ user }}/.bashrc"
        line: '. /etc/profile.d/nix.sh'
        state: present

    - name: Decrypt secrets file
      become_user: "{{ user }}"
      shell: |
        sops --decrypt /home/{{ user }}/arch-bootstrap/secrets/git.enc.yaml > /home/{{ user }}/secrets.yaml
      args:
        executable: /bin/bash

    - name: Load secrets variables
      include_vars:
        file: "/home/{{ user }}/secrets.yaml"
        name: secrets

    - name: Remove decrypted secrets file
      become_user: "{{ user }}"
      file:
        path: "/home/{{ user }}/secrets.yaml"
        state: absent

    - name: Ensure ~/.ssh exists
      become_user: "{{ user }}"
      file:
        path: "/home/{{ user }}/.ssh"
        state: directory
        mode: '0700'

    - name: Restore SSH private key from secrets
      become_user: "{{ user }}"
      copy:
        content: "{{ secrets.ssh_key }}"
        dest: "/home/{{ user }}/.ssh/id_ed25519"
        mode: '0600'
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Restore SSH public key (optional)
      become_user: "{{ user }}"
      shell: |
        ssh-keygen -y -f /home/{{ user }}/.ssh/id_ed25519 > /home/{{ user }}/.ssh/id_ed25519.pub
        chmod 644 /home/{{ user }}/.ssh/id_ed25519.pub
      args:
        executable: /bin/bash
    
    - name: Write GPG private key from secrets
      become_user: "{{ user }}"
      copy:
        content: "{{ secrets.gpg_key }}"
        dest: "/home/{{ user }}/my_gpg_private.asc"
        mode: '0600'
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Import GPG key into keyring
      become_user: "{{ user }}"
      shell: |
        gpg --import /home/{{ user }}/my_gpg_private.asc
        shred -u /home/{{ user }}/my_gpg_private.asc
      args:
        executable: /bin/bash

    - name: Set git user name from secrets
      become_user: "{{ user }}"
      git_config:
        name: user.name
        scope: global
        value: "{{ secrets.user_name }}"

    - name: Set git user email from secrets
      become_user: "{{ user }}"
      git_config:
        name: user.email
        scope: global
        value: "{{ secrets.user_email }}"

    - name: Set git signing key from secrets
      become_user: "{{ user }}"
      git_config:
        name: user.signingkey
        scope: global
        value: "{{ secrets.signing_key }}"

    - name: Enable GPG signing by default
      become_user: "{{ user }}"
      git_config:
        name: commit.gpgsign
        scope: global
        value: "true"
